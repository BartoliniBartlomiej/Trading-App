#include <iostream>
#include <string>
#include <curl/curl.h>
#include "include/json.hpp"

using json = nlohmann::json;

static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    size_t realSize = size * nmemb;
    std::string* mem = static_cast<std::string*>(userp);
    mem->append(static_cast<char*>(contents), realSize);
    return realSize;
}

int main() {
    std::string apiKey = "YFCYTD4HGW5NJ0Q2"; // ← wstaw swój klucz
    std::string symbol = "AAPL";
    std::string url = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol="
                      + symbol + "&interval=5min&apikey=" + apiKey;

    CURL* curl = curl_easy_init();
    if (!curl) { std::cerr << "curl init failed\n"; return 1; }

    std::string response;
    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
    CURLcode res = curl_easy_perform(curl);
    if (res != CURLE_OK) {
        std::cerr << "curl error: " << curl_easy_strerror(res) << "\n";
        curl_easy_cleanup(curl);
        return 1;
    }
    curl_easy_cleanup(curl);

    try {
        auto j = json::parse(response);

        if (j.contains("Meta Data") && j["Meta Data"].contains("3. Last Refreshed")) {
            std::string lastRefreshed = j["Meta Data"]["3. Last Refreshed"];
            auto ts = j["Time Series (5min)"][lastRefreshed];
            std::string price = ts["4. close"];

            std::cout << "Symbol: " << symbol
                      << "  Cena: " << price
                      << "  (Czas: " << lastRefreshed << ")\n";
        } else {
            std::cerr << "Brak timestampu w odpowiedzi: " << response << "\n";
        }
    } catch (std::exception &e) {
        std::cerr << "JSON parse error: " << e.what() << "\n";
    }

    return 0;
}
